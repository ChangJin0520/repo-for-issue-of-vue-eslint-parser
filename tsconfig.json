// https://www.typescriptlang.org/tsconfig
{
    "compileOnSave": false,
    "include": [
        // 项目源码
        "src/**/*",
    ],
    "exclude": ["node_modules"],
    "compilerOptions": {
        /*                                         */
        /* --------------------------------------- */
        /* -         Project Options             - */
        /* --------------------------------------- */
        // 不输出文件（我们使用webpack的服务进行打包，不依赖于typescript服务本身）
        "noEmit": true,

        // 输入目标（后续还会通过babel进行语法降级，故设定为esnext即可）
        "target": "esnext",

        // 项目文件系统
        "module": "esnext",

        // 允许使用js文件
        "allowJs": true,

        // 提供迭代器全面支持
        "downlevelIteration": true,

        // 独立模块
        // 当typescript与其他编译工具（例如babel）共同使用时，
        // 由于双方对于模块的解析差异，（babel每次只能处理一个文件，而非如同typescript一样可以统一处理全局的类型系统）
        // 则部分typescript支持的代码会由于其他编译工具不支持，而最终会导致运行时报错（例如const enum、namespace）
        // 开启此选项后，TS将在书写此类型语法时给出错误提示
        "isolatedModules": true,

        // 从tslib库导入typescript模块辅助函数，而非每个模块独立生成一次
        // 可以减少最终生成代码的体积
        "importHelpers": true,

        // 需要引入的默认js API类型库
        "lib": ["esnext", "dom", "dom.iterable", "scripthost"],

        // jsx代码的处理方式
        // preserve：不进行任何处理或改变直接输出
        //（vue项目需要配置为preserve）
        "jsx": "preserve",

        // 生成map
        "sourceMap": true,

        // 增量编译
        "incremental": true,

        // 增量编译文件位置
        "tsBuildInfoFile": "node_modules/.cache/.tsbuildinfo",

        /*                                         */
        /* --------------------------------------- */
        /* -          Strict Checks              - */
        /* --------------------------------------- */
        // 'strict'选项相当于启用：
        // --noImplicitAny：报告使用隐含any类型提高表达式和声明的错误
        // --noImplicitThis：报告this使用隐含any类型时的错误
        // --alwaysStrict：始终添加"use strict"申明
        // --strictBindCallApply：对bind, call, apply进行严格类型检测
        // --strictNullChecks：在严格的空检查模式中，null和undefined值不在每种类型的域中，并且只能分配给它们any（undefined可以分配的一个例外void）
        // --strictFunctionTypes：检查并限制函数类型参数是抗变（contravariantly）而非双变（bivariantly，即协变或抗变）的
        // ↑↑↑ 参阅：(What are covariance and contravariance?)[https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance]
        // --strictPropertyInitialization：确保在构造函数中初始化非未定义的类属性
        "strict": true,
        // 抑制--noImplicitAny导致的[缺少索引签名]报错
        "suppressImplicitAnyIndexErrors": true,

        /*                                         */
        /* --------------------------------------- */
        /* -        Module Resolution            - */
        /* --------------------------------------- */
        // 基础路径
        "baseUrl": ".",

        // 路径别名
        "paths": {
            "@/*": ["./src/*"],
            "@selector-org/*": ["./src/components/selector-org/src/*"],

            "@dev/*": ["./dev/*"],
            "dev-routes": ["./dev/dev-routes.ts"]
        },

        // 当types被设定时，
        // 只有列出的库的类型申明（位于node_modules/@types/）会被全局导入
        "types": ["webpack-env", "jquery"],

        // 模块解析策略，现代化项目均为node
        "moduleResolution": "node",

        // 允许从没有默认导出的模块进行默认导入
        "allowSyntheticDefaultImports": true,

        // 为CommonJS/AMD/UMD模块导入添加辅助函数
        "esModuleInterop": true,

        /*                                         */
        /* --------------------------------------- */
        /* -           Experimental              - */
        /* --------------------------------------- */
        // 为ES7的装饰器启用实验性支持
        "experimentalDecorators": true,

        /*                                         */
        /* --------------------------------------- */
        /* -           Linter Checks             - */
        /* --------------------------------------- */
        // 禁止未使用的变量申明/引入
        "noUnusedLocals": true,

        // 禁止隐式重载
        "noImplicitOverride": true,

        /*                                         */
        /* --------------------------------------- */
        /* -             Advanced                - */
        /* --------------------------------------- */
        // 允许从*.json文件中导入模块
        "resolveJsonModule": true,

        // 禁止使用大小写不规范的文件名引用
        "forceConsistentCasingInFileNames": true,

        // jsx工厂函数名称
        // （vue项目需配置为"h"）
        "jsxFactory": "h"
    },
    "vueCompilerOptions": {
        "target": 2,  // "target": 2.7, // For Vue version >= 2.7
        "experimentalSuppressInvalidJsxElementTypeErrors": true
    }
}
